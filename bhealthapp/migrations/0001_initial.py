# Generated by Django 3.2.12 on 2023-02-09 13:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(default='default.jpg', upload_to='profile_pics')),
                ('profile_link', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('name', models.TextField(max_length=20)),
                ('surname', models.TextField(max_length=30)),
                ('password', models.CharField(max_length=100)),
                ('phone_number', models.TextField(max_length=20, null=True)),
                ('email', models.TextField(max_length=80)),
                ('dob', models.DateTimeField()),
                ('address', models.TextField(default=None, max_length=80)),
                ('joined_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_blocked', models.BooleanField(default=False)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('gender', models.PositiveSmallIntegerField(choices=[(0, 'Male'), (1, 'Female')], default=1)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.TextField(default='Sarajevo')),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='Sarajevo', max_length=255)),
                ('country', models.TextField(default='Bosnia and Herzegovina', max_length=255)),
                ('postal_code', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default=None, max_length=255)),
                ('password', models.CharField(max_length=100)),
                ('address', models.TextField(default=None, max_length=350)),
                ('phone_number', models.TextField(max_length=20, null=True)),
                ('email', models.TextField(max_length=80)),
                ('website', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='lab_city', to='bhealthapp.city')),
            ],
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default=None, max_length=255)),
                ('description', models.TextField(default='Type Description', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='UserRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(0, 'No Rating'), (1, '1 star'), (2, '2 stars'), (3, '3 stars'), (4, '4 stars'), (5, '5 stars')], default=0)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='lab_rating', to='bhealthapp.lab')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_rating', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default=None, max_length=255)),
                ('duration', models.DurationField(default=30)),
                ('description', models.TextField(default='Service Description', max_length=1000)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='service_type', to='bhealthapp.type')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='appointment_result', to='bhealthapp.appointment')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='patient_result', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default=None, max_length=255)),
                ('surname', models.TextField(default=None, max_length=255)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='doctor_service', to='bhealthapp.service')),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='lab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='lab_name', to='bhealthapp.lab'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='service_name', to='bhealthapp.service'),
        ),
        migrations.AddField(
            model_name='patient',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_city', to='bhealthapp.city'),
        ),
        migrations.AddField(
            model_name='patient',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='patient',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
